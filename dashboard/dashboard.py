import pandas as pd
import plotly.graph_objects as go

# --- 1. Estrutura√ß√£o dos Dados ---
data = {
    'Modelo': ["GPT Turbo + Mini", "GPT Turbo"],
    'Passaram': [37, 33],
    'Falharam': [5, 10],
    'Erro Cr√≠tico': [8, 7],
    'Total': [50, 50],
    'Tempo M√©dio (s)': [18.28, 23.00]
}
df = pd.DataFrame(data)

# --- 2. Prepara√ß√£o dos C√°lculos para os Filtros ---
df['Falha Total (com erro)'] = df['Falharam'] + df['Erro Cr√≠tico']
df['Passaram % (com erro)'] = (df['Passaram'] / df['Total']) * 100
df['Falha Total % (com erro)'] = (df['Falha Total (com erro)'] / df['Total']) * 100

df['Total V√°lido (sem erro)'] = df['Total'] - df['Erro Cr√≠tico']
df['Passaram % (sem erro)'] = (df['Passaram'] / df['Total V√°lido (sem erro)']) * 100
df['Falharam % (sem erro)'] = (df['Falharam'] / df['Total V√°lido (sem erro)']) * 100

# --- 3. Cria√ß√£o do Gr√°fico Unificado ---

fig = go.Figure()

fig.add_trace(go.Bar(
    x=df['Modelo'], y=df['Passaram'], name='‚úÖ Passaram',
    marker_color='#2E7D32', texttemplate='%{y}', textposition='outside'
))
fig.add_trace(go.Bar(
    x=df['Modelo'], y=df['Falharam'], name='‚ùå Falharam (Valida√ß√£o)',
    marker_color='#ED6C02', texttemplate='%{y}', textposition='outside'
))
fig.add_trace(go.Bar(
    x=df['Modelo'], y=df['Erro Cr√≠tico'], name='üí• Erro Cr√≠tico (Execu√ß√£o)',
    marker_color='#D32F2F', texttemplate='%{y}', textposition='outside'
))

# --- 4. Cria√ß√£o dos Bot√µes de Filtro (Menu Dropdown) ---

# MUDAN√áA: Definimos o t√≠tulo principal como uma vari√°vel para reutiliz√°-lo
main_title_text = "<b>Dashboard de Performance dos Modelos de An√°lise de Curr√≠culos</b>"

buttons = [
    # MUDAN√áA: Cada bot√£o agora inclui a chave 'title_text' para manter o t√≠tulo principal
    dict(label="Resultados: Absoluto (com erros)",
         method="update",
         args=[{"y": [df['Passaram'], df['Falharam'], df['Erro Cr√≠tico']],
                "text": [df['Passaram'], df['Falharam'], df['Erro Cr√≠tico']],
                "texttemplate": '%{text}', "visible": [True, True, True]},
               {"title_text": f"{main_title_text}<br><sup>Visualiza√ß√£o: Resultados Absolutos (com erros)</sup>",
                "yaxis.title": 'N¬∫ de Testes'}]),
    dict(label="Resultados: Porcentagem (com erros)",
         method="update",
         args=[{"y": [df['Passaram % (com erro)'], df['Falha Total % (com erro)']],
                "text": [df['Passaram % (com erro)'].round(1).astype(str) + '%', 
                         df['Falha Total % (com erro)'].round(1).astype(str) + '%'],
                "texttemplate": '%{text}', "visible": [True, True, False]},
               {"title_text": f"{main_title_text}<br><sup>Visualiza√ß√£o: Distribui√ß√£o dos Resultados (% do Total)</sup>",
                "yaxis.title": 'Porcentagem (%)'}]),
    dict(label="Resultados: Absoluto (sem erros)",
         method="update",
         args=[{"y": [df['Passaram'], df['Falharam']],
                "text": [df['Passaram'], df['Falharam']],
                "texttemplate": '%{text}', "visible": [True, True, False]},
               {"title_text": f"{main_title_text}<br><sup>Visualiza√ß√£o: Performance da IA (Apenas Testes V√°lidos)</sup>",
                "yaxis.title": 'N¬∫ de Testes'}]),
    dict(label="Resultados: Porcentagem (sem erros)",
         method="update",
         args=[{"y": [df['Passaram % (sem erro)'], df['Falharam % (sem erro)']],
                "text": [df['Passaram % (sem erro)'].round(1).astype(str) + '%', 
                         df['Falharam % (sem erro)'].round(1).astype(str) + '%'],
                "texttemplate": '%{text}', "visible": [True, True, False]},
               {"title_text": f"{main_title_text}<br><sup>Visualiza√ß√£o: Taxa de Sucesso da IA (Apenas Testes V√°lidos)</sup>",
                "yaxis.title": 'Porcentagem (%)'}]),
    dict(label="Performance: Tempo M√©dio",
         method="update",
         args=[{"y": [df['Tempo M√©dio (s)']],
                "text": [df['Tempo M√©dio (s)'].round(2).astype(str) + 's'],
                "texttemplate": '%{text}', "visible": [True, False, False]},
               {"title_text": f"{main_title_text}<br><sup>Visualiza√ß√£o: Performance (Tempo M√©dio por An√°lise)</sup>",
                "yaxis.title": 'Tempo M√©dio (segundos)'}]),
]

# --- 5. Estiliza√ß√£o Final do Dashboard ---

fig.update_layout(
    title_text=f"{main_title_text}<br><sup>Use o filtro para explorar diferentes m√©tricas</sup>", # T√≠tulo inicial
    title_x=0.5,
    height=700,
    template="plotly_white",
    font=dict(family="Arial, Helvetica, sans-serif", size=15, color="#212529"),
    barmode='group',
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),
    margin=dict(t=150, b=80, l=80, r=80),
    updatemenus=[
        dict(
            buttons=buttons,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.01,
            xanchor="left",
            y=1.16,
            yanchor="top",
            bgcolor="#f8f9fa",
            bordercolor="#dee2e6"
        )
    ]
)

fig.update_xaxes(title_text="Configura√ß√£o do Modelo", tickfont=dict(size=14))
fig.update_yaxes(title_text="N¬∫ de Testes", tickfont=dict(size=14), gridcolor='#e9ecef')

# --- 6. Exibi√ß√£o do Dashboard ---
print("Exibindo dashboard interativo... Feche a janela do navegador para encerrar o script.")
fig.show()